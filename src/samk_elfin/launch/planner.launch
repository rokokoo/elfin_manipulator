<?xml version="1.0"?>
<launch>
	<arg name="model_file" default="elfin5_no_tool" />

	<!-- By default we do not overwrite the URDF. Change the following to true to change the default behavior -->
	<arg name="load_robot_description" default="true"/>

	<!-- The name of the parameter under which the URDF is loaded -->
	<arg name="robot_description" default="robot_description"/>

	<!-- Load universal robot description format (URDF) -->
	<param if="$(arg load_robot_description)" name="$(arg robot_description)" command="$(find xacro)/xacro --inorder '$(find samk_elfin)/urdf/$(arg model_file).xacro'"/>

	<!-- The semantic description that corresponds to the URDF -->
	<param name="$(arg robot_description)_semantic" textfile="$(find samk_elfin)/config/srdf/$(arg model_file).srdf" />

	<!-- Load updated joint limits (override information from URDF) -->
	<group ns="$(arg robot_description)_planning">
		<rosparam command="load" file="$(find elfin5_moveit_config)/config/joint_limits.yaml"/>
	</group>

	<!-- Load default settings for kinematics; these settings are overridden by settings in a node's namespace -->
	<group ns="$(arg robot_description)_kinematics">
		<rosparam command="load" file="$(find samk_elfin)/config/kinematics.yaml"/>
	</group>


	<arg name="debug" default="false" />
	<arg unless="$(arg debug)" name="launch_prefix" value="" />
	<arg if="$(arg debug)" name="launch_prefix" value="gdb -x $(find samk_elfin)/launch/gdb_settings.gdb --ex run --args" />

	<!-- Verbose Mode Option -->
	<arg name="info" default="$(arg debug)" />
	<arg unless="$(arg info)" name="command_args" value="" />
	<arg if="$(arg info)" name="command_args" value="--debug" />

	<!-- move_group settings -->
	<arg name="allow_trajectory_execution" default="true"/>
	<arg name="fake_execution" default="false"/>
	<arg name="max_safe_path_cost" default="1"/>
	<arg name="jiggle_fraction" default="0.05" />
	<arg name="publish_monitored_planning_scene" default="true"/>

	<!-- OMPL Plugin for MoveIt! -->
	<arg name="planning_plugin" value="ompl_interface/OMPLPlanner" />

	<!-- The request adapters (plugins) used when planning with OMPL. 
       ORDER MATTERS -->
	<arg name="planning_adapters" value="default_planner_request_adapters/AddTimeParameterization
				       default_planner_request_adapters/FixWorkspaceBounds
				       default_planner_request_adapters/FixStartStateBounds
				       default_planner_request_adapters/FixStartStateCollision
				       default_planner_request_adapters/FixStartStatePathConstraints" />

	<arg name="start_state_max_bounds_error" value="0.1" />

	<param name="planning_plugin" value="$(arg planning_plugin)" />
	<param name="request_adapters" value="$(arg planning_adapters)" />
	<param name="start_state_max_bounds_error" value="$(arg start_state_max_bounds_error)" />

	<rosparam command="load" file="$(find samk_elfin)/config/srdf/$(arg model_file)_planner.yaml"/>

	<!-- Trajectory Execution Functionality -->
	<include ns="move_group" file="$(find elfin5_moveit_config)/launch/trajectory_execution.launch.xml" if="$(arg allow_trajectory_execution)">
		<arg name="moveit_manage_controllers" value="true" />
		<arg name="moveit_controller_manager" value="elfin5" unless="$(arg fake_execution)"/>
		<arg name="moveit_controller_manager" value="fake" if="$(arg fake_execution)"/>
	</include>

	<!-- Sensors Functionality -->
	<include ns="move_group" file="$(find elfin5_moveit_config)/launch/sensor_manager.launch.xml" if="$(arg allow_trajectory_execution)">
		<arg name="moveit_sensor_manager" value="elfin5" />
	</include>

	<!-- Start the actual move_group node/action server -->
	<node name="move_group" launch-prefix="$(arg launch_prefix)" pkg="moveit_ros_move_group" type="move_group" respawn="false" output="screen" args="$(arg command_args)">
		<!-- Set the display variable, in case OpenGL code is used internally -->
		<env name="DISPLAY" value="$(optenv DISPLAY :0)" />

		<param name="allow_trajectory_execution" value="$(arg allow_trajectory_execution)"/>
		<param name="max_safe_path_cost" value="$(arg max_safe_path_cost)"/>
		<param name="jiggle_fraction" value="$(arg jiggle_fraction)" />

		<!-- load these non-default MoveGroup capabilities -->
		<!--
    	<param name="capabilities" value="
                  a_package/AwsomeMotionPlanningCapability
                  another_package/GraspPlanningPipeline
                  " />
		-->

		<!-- inhibit these default MoveGroup capabilities -->
		<!--
    	<param name="disable_capabilities" value="
                  move_group/MoveGroupKinematicsService
                  move_group/ClearOctomapService
                  " />
		-->

		<!-- Publish the planning scene of the physical robot so that rviz plugin can know actual robot -->
		<param name="planning_scene_monitor/publish_planning_scene" value="$(arg publish_monitored_planning_scene)" />
		<param name="planning_scene_monitor/publish_geometry_updates" value="$(arg publish_monitored_planning_scene)" />
		<param name="planning_scene_monitor/publish_state_updates" value="$(arg publish_monitored_planning_scene)" />
		<param name="planning_scene_monitor/publish_transforms_updates" value="$(arg publish_monitored_planning_scene)" />
	</node>

	<arg name="display" default="true"/>
	<include file="$(find samk_elfin)/launch/rviz.launch" if="$(arg display)">
		<arg name="config" value="true"/>
	</include>
</launch>